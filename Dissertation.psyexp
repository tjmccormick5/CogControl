<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="1.90.1">
  <Settings>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="Experiment info" updates="None" val="{u'participant': u'', u'session': u'001', u'group': u''}" valType="code"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Units" updates="None" val="use prefs" valType="str"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="Full-screen window" updates="None" val="False" valType="bool"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="OSF Project ID" updates="None" val="" valType="str"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="expName" updates="None" val="withDan" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
  </Settings>
  <Routines>
    <Routine name="flanker">
      <ImageComponent name="imageStim">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="imageStim" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="set every repeat" val="$image" valType="str"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="code"/>
      </ImageComponent>
      <KeyboardComponent name="flankerkeyresponse">
        <Param name="correctAns" updates="constant" val="$imageCorrAns" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="flankerkeyresponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="2.0" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'f', 'j'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="pickBlock">
      <CodeComponent name="pickBlock_code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="pickBlock_code" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="# If we're on the 0th repetition (in our case meaning the 1st block),&amp;#10;# get the 0th item in blockSeq list we made earlier.&amp;#10;block = blockSeq[blocks.thisRepN]&amp;#10;&amp;#10;# Get the conditions file for that block&amp;#10;condFile = condFiles[block]" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="Flanker_Instructions2">
      <TextComponent name="flankerInstructions2">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="flankerInstructions2" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="Remember&amp;#10;&amp;#10;You'll repeat if you don't get at least 80% correct&amp;#10;&amp;#10;Press 'space' when you're ready to continue" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="FlankerInstructions2_keyresponse">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="FlankerInstructions2_keyresponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="SPR_Instructions2">
      <TextComponent name="SPRinstructions2">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="SPRinstructions2" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="Remember that you need to respond to the questions &amp;#10;at least 80% correct to continue &amp;#10;&amp;#10;Press 'space' when you're ready to continue" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val=".1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="SPRinstructions2_keyresponse">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SPRinstructions2_keyresponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="SPR_Instructions">
      <TextComponent name="SPRInstructions">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="SPRInstructions" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="Full Instructions for SPR&amp;#10;&amp;#10;Press 'space' to continue.&amp;#10;&amp;#10;" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="SPRInstructions_keyresponse">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="SPRInstructions_keyresponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trial2"/>
    <Routine name="PracticeFlanker">
      <ImageComponent name="practiceFlanker">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="practiceFlanker" valType="code"/>
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="image" updates="set every repeat" val="$practiceimage" valType="str"/>
        <Param name="size" updates="constant" val="(1, 1)" valType="code"/>
      </ImageComponent>
      <KeyboardComponent name="PracticeFlankerResponse">
        <Param name="correctAns" updates="constant" val="$PracticeimageCorrAns" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="PracticeFlankerResponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'f', 'j'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="RepeatIfNeeded_flanker">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="RepeatIfNeeded_flanker" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="''' reset the counter at the beginning of each practice loop:'''&amp;#10;if practiceFlankerLoop.thisN == 0:&amp;#10;    number_correct = 0" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="''' update the number correct:'''&amp;#10;if PracticeFlankerResponse.corr:&amp;#10;    number_correct = number_correct + 1&amp;#10;&amp;#10;''' if this is the final repetition, check the proportion correct.&amp;#10;    (am avoiding hard coding the value '12' for flexibility):'''&amp;#10;if practiceFlankerLoop.thisN +1 == practiceFlankerLoop.nTotal:&amp;#10;    if number_correct/(practiceFlankerLoop.nTotal) &gt;= 0.8:&amp;#10;        ''' terminate the outer loop so no more practice happens:'''&amp;#10;        RepeatFlankerIfNeeded.finished = True&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="rest">
      <TextComponent name="restBetweenBlocks">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="restBetweenBlocks" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="Rest, muthafucka!&amp;#10;&amp;#10;Press 'space' when you're ready to continue" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="rest_keyresponse">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="rest_keyresponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="code" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="if blocks.thisN + 1 == blocks.nTotal:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial">
      <TextComponent name="sentences">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="sentences" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="This should not appear" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <CodeComponent name="sentenceMasking_code">
        <Param name="Begin Experiment" updates="constant" val="# now define a function which we can use here and later on to replace letters with '-': &amp;#10;&amp;#10;def replaceWithdash(textList, currentWordNumber): &amp;#10;    &amp;#10;    dashSentence = '' &amp;#10;    for index, word in enumerate(textList): # cycle through the words and their index numbers &amp;#10;        if index != currentWordNumber: &amp;#10;            dashSentence = dashSentence + ' ' + '-' * len(word)# add a string of dash characters &amp;#10;        else:&amp;#10;            dashSentence = dashSentence + ' ' + word #for current word, but space was appearing between period and final word, so put space before each word rather than after&amp;#10;    return dashSentence +'.' # yields the manipulated sentence &amp;#10;&amp;#10;# Creating our own clock to time how reaction times&amp;#10;# based on screen flips (i.e. when the word was actually&amp;#10;# shown&amp;#10;wordClock = core.Clock()" valType="extendedCode"/>
        <Param name="name" updates="None" val="sentenceMasking_code" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="# remove any keypresses remaining in the buffer from &amp;#10;# before  this routine started:&amp;#10;event.clearEvents() &amp;#10;sentenceList = sentence.split() &amp;#10;# this breaks your sentence's single string of characters into a list of individual &amp;#10;# words, e.g. 'The quick brown fox.' becomes ['The', 'quick', 'brown', 'fox.'] &amp;#10;&amp;#10;# keep track of which word we are up to: &amp;#10;wordNumber = -1 # -1 as we haven't started yet &amp;#10;&amp;#10;# now at the very beginning of the trial, we need to run this function for the &amp;#10;# first time. As the current word number is -1, it should make all words '-'. &amp;#10;# Use the actual name of your Builder text component here: &amp;#10;&amp;#10;sentences.text = replaceWithdash(sentenceList, wordNumber) &amp;#10;&amp;#10;# DAN: reset our wordClock (it gets set to 0)&amp;#10;wordClock.reset()&amp;#10;&amp;#10;# In the Builder interface, specify a &quot;constant&quot; value for the text content, e.g. &amp;#10;# 'test', so it doesn't conflict with our code. &amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="keypresses = event.getKeys() # returns a list of keypresses &amp;#10;&amp;#10;if len(keypresses) &gt; 0: # at least one key was pushed &amp;#10;&amp;#10;    if 'space' in keypresses: &amp;#10;        &amp;#10;        thisResponseTime = t # the current time in the trial &amp;#10;&amp;#10;        # DAN: Also saving the time based on our wordClock,&amp;#10;        # which is reset when the next word is actually shown&amp;#10;        rtFromFlip = wordClock.getTime()&amp;#10;        # Tell psychopy to call the wordClock's reset() method&amp;#10;        # the next time the window flips:&amp;#10;        win.callOnFlip(wordClock.reset)&amp;#10;&amp;#10;        wordNumber = wordNumber + 1 &amp;#10;        if wordNumber &lt; len(sentenceList): &amp;#10;&amp;#10;            if wordNumber == 0: # need to initialise a variable: &amp;#10;                timeOfLastResponse = 0 &amp;#10;&amp;#10;            # save the inter response interval for this keypress, &amp;#10;            # in variables called IRI_0, IRI_1, etc: &amp;#10;            thisExp.addData('IRI_' + str(wordNumber), thisResponseTime - timeOfLastResponse) &amp;#10;            timeOfLastResponse = thisResponseTime &amp;#10;&amp;#10;            # Saving our flip-based rt&amp;#10;            thisExp.addData(&quot;IRI_FL_&quot; + str(wordNumber), rtFromFlip)&amp;#10;&amp;#10;            # Also, since you asked, we'll save the time&amp;#10;            # since the trial started. (i.e. if the 'space' is hit&amp;#10;            # at second 1 and 2:&amp;#10;            #   IRI_1 = 1 &amp;#10;            #   IRI_2 = 1&amp;#10;            #   space_1 = 1&amp;#10;            #   space_2 = 2&amp;#10;            thisExp.addData(&quot;space_&quot; + str(wordNumber), thisResponseTime) &amp;#10;&amp;#10;            # update the text by masking all but the current word &amp;#10;            sentences.text = replaceWithdash(sentenceList, wordNumber) &amp;#10;        else: &amp;#10;            continueRoutine = False # time to go on to the next trial &amp;#10;&amp;#10;    elif 'escape' in keypresses: &amp;#10;&amp;#10;        core.quit() # I think you'll need to handle quitting manually now. " valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="CompQ">
      <TextComponent name="questTS">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="questTS" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="set every repeat" val="$compQ" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <TextComponent name="respLeftTS">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="respLeftTS" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="set every repeat" val="$compRespL" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(-0.5, -0.5)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <TextComponent name="respRightTS">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="respRightTS" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="set every repeat" val="$compRespR" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0.5, -0.5)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="CompQkeyresponse">
        <Param name="correctAns" updates="constant" val="$compRespCorr" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="CompQkeyresponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'f', 'j'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Flanker_Instructions">
      <TextComponent name="FlankerInstructions">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="FlankerInstructions" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="Full flanker instructions&amp;#10;&amp;#10;Press 'space' to continue.&amp;#10;" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="FlankerInstructions_keyresponse">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="FlankerInstructions_keyresponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="Goodbye">
      <TextComponent name="EndText">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="EndText" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="Goodbye" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="setupExp">
      <CodeComponent name="SetUpExp_code">
        <Param name="Begin Experiment" updates="constant" val="group = expInfo[&quot;group&quot;]&amp;#10;&amp;#10;# A dictionary, where the key is a block name,&amp;#10;# and the value is the name of the spreadsheet&amp;#10;# containing the trials for that block&amp;#10;condFiles = {&amp;#10;    &quot;A&quot;: &quot;A.csv&quot;,&amp;#10;    &quot;B&quot;: &quot;B.csv&quot;,&amp;#10;    }&amp;#10;&amp;#10;# Key is group (a string &quot;1&quot;, &quot;2&quot;, etc.)&amp;#10;# Value is a list containing the blocks in the desired&amp;#10;#   order for the group. &amp;#10;blockSequences = {&amp;#10;    &quot;1&quot;: [&quot;A&quot;, &quot;B&quot;], # Group 1 will see A first, then B.&amp;#10;    &quot;2&quot;: [&quot;B&quot;, &quot;A&quot;],&amp;#10;    }&amp;#10;&amp;#10;# Make sure &quot;group&quot; entered in the gui dialog is one that&amp;#10;# we want&amp;#10;assert group in blockSequences, &quot;Invalid group entered&quot;&amp;#10;&amp;#10;# Set the block sequence for this participant's group.&amp;#10;blockSeq = blockSequences[group]" valType="extendedCode"/>
        <Param name="name" updates="None" val="SetUpExp_code" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="fixation">
      <TextComponent name="fixation_cross">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="fixation_cross" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="PracticeSentences">
      <TextComponent name="practiceSentences">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="practiceSentences" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="This should not appear" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <CodeComponent name="SPRmasking_code_practice">
        <Param name="Begin Experiment" updates="constant" val="# now define a function which we can use here and later on to replace letters with '-': &amp;#10;&amp;#10;def replaceWithdash(textList, currentWordNumber): &amp;#10;    &amp;#10;    dashSentence = '' &amp;#10;    for index, word in enumerate(textList): # cycle through the words and their index numbers &amp;#10;        if index != currentWordNumber: &amp;#10;            dashSentence = dashSentence + ' ' + '-' * len(word)# add a string of dash characters &amp;#10;        else:&amp;#10;            dashSentence = dashSentence + ' ' + word #for current word, but space was appearing between period and final word, so put space before each word rather than after&amp;#10;    return dashSentence +'.' # yields the manipulated sentence &amp;#10;&amp;#10;# Creating our own clock to time how reaction times&amp;#10;# based on screen flips (i.e. when the word was actually&amp;#10;# shown&amp;#10;wordClock = core.Clock()" valType="extendedCode"/>
        <Param name="name" updates="None" val="SPRmasking_code_practice" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="# remove any keypresses remaining in the buffer from &amp;#10;# before  this routine started:&amp;#10;event.clearEvents() &amp;#10;practiceSentenceList = practiceSentence.split() &amp;#10;# this breaks your sentence's single string of characters into a list of individual &amp;#10;# words, e.g. 'The quick brown fox.' becomes ['The', 'quick', 'brown', 'fox.'] &amp;#10;&amp;#10;# keep track of which word we are up to: &amp;#10;wordNumber = -1 # -1 as we haven't started yet &amp;#10;&amp;#10;# now at the very beginning of the trial, we need to run this function for the &amp;#10;# first time. As the current word number is -1, it should make all words '-'. &amp;#10;# Use the actual name of your Builder text component here: &amp;#10;&amp;#10;practiceSentences.text = replaceWithdash(practiceSentenceList, wordNumber) &amp;#10;&amp;#10;# DAN: reset our wordClock (it gets set to 0)&amp;#10;wordClock.reset()&amp;#10;&amp;#10;# In the Builder interface, specify a &quot;constant&quot; value for the text content, e.g. &amp;#10;# 'test', so it doesn't conflict with our code. &amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="keypresses = event.getKeys() # returns a list of keypresses &amp;#10;&amp;#10;if len(keypresses) &gt; 0: # at least one key was pushed &amp;#10;&amp;#10;    if 'space' in keypresses: &amp;#10;        &amp;#10;        thisResponseTime = t # the current time in the trial &amp;#10;&amp;#10;        # DAN: Also saving the time based on our wordClock,&amp;#10;        # which is reset when the next word is actually shown&amp;#10;        rtFromFlip = wordClock.getTime()&amp;#10;        # Tell psychopy to call the wordClock's reset() method&amp;#10;        # the next time the window flips:&amp;#10;        win.callOnFlip(wordClock.reset)&amp;#10;&amp;#10;        wordNumber = wordNumber + 1 &amp;#10;        if wordNumber &lt; len(practiceSentenceList): &amp;#10;&amp;#10;            if wordNumber == 0: # need to initialise a variable: &amp;#10;                timeOfLastResponse = 0 &amp;#10;&amp;#10;            # save the inter response interval for this keypress, &amp;#10;            # in variables called IRI_0, IRI_1, etc: &amp;#10;            thisExp.addData('IRI_' + str(wordNumber), thisResponseTime - timeOfLastResponse) &amp;#10;            timeOfLastResponse = thisResponseTime &amp;#10;&amp;#10;            # Saving our flip-based rt&amp;#10;            thisExp.addData(&quot;IRI_FL_&quot; + str(wordNumber), rtFromFlip)&amp;#10;&amp;#10;            # Also, since you asked, we'll save the time&amp;#10;            # since the trial started. (i.e. if the 'space' is hit&amp;#10;            # at second 1 and 2:&amp;#10;            #   IRI_1 = 1 &amp;#10;            #   IRI_2 = 1&amp;#10;            #   space_1 = 1&amp;#10;            #   space_2 = 2&amp;#10;            thisExp.addData(&quot;space_&quot; + str(wordNumber), thisResponseTime) &amp;#10;&amp;#10;            # update the text by masking all but the current word &amp;#10;            practiceSentences.text = replaceWithdash(practiceSentenceList, wordNumber) &amp;#10;        else: &amp;#10;            continueRoutine = False # time to go on to the next trial &amp;#10;&amp;#10;    elif 'escape' in keypresses: &amp;#10;&amp;#10;        core.quit() # I think you'll need to handle quitting manually now. " valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="practiceSentenceCompQ">
      <TextComponent name="practiceCompQ">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="practiceCompQ" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="set every repeat" val="$practiceSentenceCompQ" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <TextComponent name="practiceCompRespLeft">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="practiceCompRespLeft" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="set every repeat" val="$compRespL" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(-.5, -.5)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <TextComponent name="practiceCompRespRight">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="practiceCompRespRight" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="set every repeat" val="$compRespR" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(.5, -.5)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_practiceCompQ">
        <Param name="correctAns" updates="constant" val="$compRespCorr" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_practiceCompQ" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'f', 'j'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <CodeComponent name="RepeatIfNeeded_SPR">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="name" updates="None" val="RepeatIfNeeded_SPR" valType="code"/>
        <Param name="Begin Routine" updates="constant" val="''' reset the counter at the beginning of each practice loop:'''&amp;#10;if practiceSentenceLoop.thisN == 0:&amp;#10;    number_correct = 0" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="''' update the number correct:'''&amp;#10;if key_resp_practiceCompQ.corr:&amp;#10;    number_correct = number_correct + 1&amp;#10;&amp;#10;''' if this is the final repetition, check the proportion correct.&amp;#10;    (am avoiding hard coding the value '12' for flexibility):'''&amp;#10;if practiceSentenceLoop.thisN + 1 == practiceSentenceLoop.nTotal:&amp;#10;    if number_correct/(practiceSentenceLoop.nTotal) &gt;= 0.8:&amp;#10;        ''' terminate the outer loop so no more practice happens:'''&amp;#10;        RepeatPracticeSentencesIfNeeded.finished = True&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
      </CodeComponent>
    </Routine>
    <Routine name="Combined_Instructions">
      <TextComponent name="Instructions_Combined">
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="name" updates="None" val="Instructions_Combined" valType="code"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="text" updates="constant" val="Now you'll do both SPR and flanker&amp;#10;&amp;#10;Press 'space' to continue." valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="font" updates="constant" val="Courier" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="combinedInstructions_keyresponse">
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="combinedInstructions_keyresponse" valType="code"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="Flanker_Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="RepeatFlankerIfNeeded">
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="name" updates="None" val="RepeatFlankerIfNeeded" valType="code"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="999" valType="code"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="Selected rows" updates="None" val="" valType="str"/>
    </LoopInitiator>
    <Routine name="Flanker_Instructions2"/>
    <LoopInitiator loopType="TrialHandler" name="practiceFlankerLoop">
      <Param name="conditionsFile" updates="None" val="Practice.csv" valType="str"/>
      <Param name="name" updates="None" val="practiceFlankerLoop" valType="code"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="conditions" updates="None" val="[OrderedDict([(u'practiceimage', u'congruent_left'), (u'imageCorrAns', u'f'), (u'congruent', 1), (u'sentence', u&quot;Practice one what's up&quot;), (u'compQ', u'Did you understand?'), (u'compRespL', u'Yes'), (u'compRespR', u'No'), (u'compRespCorr', u'f'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'congruent_right'), (u'imageCorrAns', u'j'), (u'congruent', 1), (u'sentence', u'Practice two this is practice'), (u'compQ', u'Did you understand?'), (u'compRespL', u'No'), (u'compRespR', u'Yes'), (u'compRespCorr', u'j'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'incongruent_left'), (u'imageCorrAns', u'f'), (u'congruent', 0), (u'sentence', u'How is practice going?'), (u'compQ', u'Did you understand?'), (u'compRespL', u'Yes'), (u'compRespR', u'No'), (u'compRespCorr', u'f'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'incongruent_right'), (u'imageCorrAns', u'j'), (u'congruent', 0), (u'sentence', u'All good with the practice?'), (u'compQ', u'Did you understand?'), (u'compRespL', u'Yes'), (u'compRespR', u'No'), (u'compRespCorr', u'f'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'single_left'), (u'imageCorrAns', u'f'), (u'congruent', 0), (u'sentence', u&quot;Let's see how practice goes&quot;), (u'compQ', u'Did you understand?'), (u'compRespL', u'Yes'), (u'compRespR', u'No'), (u'compRespCorr', u'f'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'single_right'), (u'imageCorrAns', u'j'), (u'congruent', 0), (u'sentence', None), (u'compQ', None), (u'compRespL', None), (u'compRespR', None), (u'compRespCorr', None), (u'block', None)])]" valType="str"/>
      <Param name="Selected rows" updates="None" val="" valType="str"/>
    </LoopInitiator>
    <Routine name="fixation"/>
    <Routine name="PracticeFlanker"/>
    <LoopTerminator name="practiceFlankerLoop"/>
    <LoopTerminator name="RepeatFlankerIfNeeded"/>
    <Routine name="SPR_Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="RepeatPracticeSentencesIfNeeded">
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="name" updates="None" val="RepeatPracticeSentencesIfNeeded" valType="code"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="999" valType="code"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="Selected rows" updates="None" val="" valType="str"/>
    </LoopInitiator>
    <Routine name="SPR_Instructions2"/>
    <LoopInitiator loopType="TrialHandler" name="practiceSentenceLoop">
      <Param name="conditionsFile" updates="None" val="Practice.csv" valType="str"/>
      <Param name="name" updates="None" val="practiceSentenceLoop" valType="code"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="conditions" updates="None" val="[OrderedDict([(u'practiceimage', u'congruent_left'), (u'PracticeimageCorrAns', u'f'), (u'congruent', 1), (u'practiceSentence', u&quot;Practice one what's up&quot;), (u'compQ', u'Did you understand?'), (u'compRespL', u'Yes'), (u'compRespR', u'No'), (u'compRespCorr', u'f'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'congruent_right'), (u'PracticeimageCorrAns', u'j'), (u'congruent', 1), (u'practiceSentence', u'Practice two this is practice'), (u'compQ', u'Did you understand?'), (u'compRespL', u'No'), (u'compRespR', u'Yes'), (u'compRespCorr', u'j'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'incongruent_left'), (u'PracticeimageCorrAns', u'f'), (u'congruent', 0), (u'practiceSentence', u'How is practice going?'), (u'compQ', u'Did you understand?'), (u'compRespL', u'Yes'), (u'compRespR', u'No'), (u'compRespCorr', u'f'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'incongruent_right'), (u'PracticeimageCorrAns', u'j'), (u'congruent', 0), (u'practiceSentence', u'All good with the practice?'), (u'compQ', u'Did you understand?'), (u'compRespL', u'Yes'), (u'compRespR', u'No'), (u'compRespCorr', u'f'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'single_left'), (u'PracticeimageCorrAns', u'f'), (u'congruent', 0), (u'practiceSentence', u&quot;Let's see how practice goes&quot;), (u'compQ', u'Did you understand?'), (u'compRespL', u'Yes'), (u'compRespR', u'No'), (u'compRespCorr', u'f'), (u'block', u'practice')]), OrderedDict([(u'practiceimage', u'single_right'), (u'PracticeimageCorrAns', u'j'), (u'congruent', 0), (u'practiceSentence', None), (u'compQ', None), (u'compRespL', None), (u'compRespR', None), (u'compRespCorr', None), (u'block', None)])]" valType="str"/>
      <Param name="Selected rows" updates="None" val="" valType="str"/>
    </LoopInitiator>
    <Routine name="PracticeSentences"/>
    <Routine name="practiceSentenceCompQ"/>
    <LoopTerminator name="practiceSentenceLoop"/>
    <LoopTerminator name="RepeatPracticeSentencesIfNeeded"/>
    <Routine name="setupExp"/>
    <Routine name="Combined_Instructions"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="$len(condFiles)" valType="code"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="Selected rows" updates="None" val="" valType="str"/>
    </LoopInitiator>
    <Routine name="pickBlock"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="conditionsFile" updates="None" val="$condFile" valType="str"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="Selected rows" updates="None" val="" valType="str"/>
    </LoopInitiator>
    <Routine name="fixation"/>
    <Routine name="flanker"/>
    <Routine name="fixation"/>
    <Routine name="trial"/>
    <Routine name="CompQ"/>
    <LoopTerminator name="trials"/>
    <Routine name="rest"/>
    <LoopTerminator name="blocks"/>
    <Routine name="Goodbye"/>
  </Flow>
</PsychoPy2experiment>
